{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Welcome","_ref","user","react_default","a","createElement","className","username","aria-hidden","LoginForm","e","preventDefault","this","refs","value","props","onSignIn","class","type","ref","placeholder","onClick","handleSignIn","bind","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","App_Welcome","App_LoginForm","signIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58b7fcc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './view/css/bootstrap.css';\nimport './view/css/main.css';\nimport './view/css/font-awesome.css';\n\nconst Welcome = ({user})=> {\n    return (\n      <div className=\"App\">\n         <header className=\"App-header\">\n         <h1 className=\"display-4\">Welcome {user.username}<i className=\"fa fa-smile-o\" aria-hidden=\"true\"></i></h1>\n         <p className=\"h6\">We are just waiting for a users to join.</p>\n        </header>\n      </div>\n    )\n  }\n  \n  class LoginForm extends Component {\n      handleSignIn(e) {\n      e.preventDefault()\n      let username = this.refs.username.value\n      this.props.onSignIn(username)\n    }\n    \n    render() {\n      return (\n         <div className=\"App\">\n         <header className=\"App-header\">\n           <div className=\"col-sm-3 col-md-6\" >\n             <h1 className=\"display-4\">Welcome to the Trivia App<i class=\"fa fa-video-camera\" aria-hidden=\"true\"></i></h1>\n             <input type=\"text\" className=\"form-control form-rounded text-center\" ref=\"username\" placeholder=\"What's your name\" />\n             <br/>\n             <p className=\"h6\">Click below to join the game.<i className=\"fa fa-gamepad\" aria-hidden=\"true\"></i> </p>\n             <button type=\"button\" className=\"col-6 btn btn-info form-rounded\" onClick={this.handleSignIn.bind(this)}>Join</button>\n           </div>\n         </header>\n       </div>\n      )\n    }\n  }\n\n  class App extends Component {\n    constructor(props) {\n      super(props)\n      this.state = { user: null }\n    }\n    signIn(username) {\n      // This is where you would call Firebase, an API etc...\n      // calling setState will re-render the entire app (efficiently!)\n      this.setState({\n        user: {\n          username,\n        }});\n    }\n    \n    render() {\n      return (\n        <div>\n          { \n            (this.state.user) ? \n            <Welcome user={this.state.user}/> :\n            <LoginForm  onSignIn={this.signIn.bind(this)} />\n          }\n        </div>\n      )\n    }\n  }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n\n\n  \n  ReactDOM.render(<App/>, document.getElementById(\"root\"))\n  serviceWorker.register();"],"sourceRoot":""}